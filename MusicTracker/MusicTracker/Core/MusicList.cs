using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

using MusicTracker.Util;

namespace MusicTracker.Core
{
    public class MusicList : MusicObjectBase, IXESerializable
    {
        private int lastID;


        public List<MusicItem> Downloaded { get; private set; }

        public List<MusicItem> NotDownloaded { get; private set; }

        public MusicGenres Genres { get; private set; }


        public MusicList()
        {
            this.lastID = 0;
            this.Downloaded = new List<MusicItem>();
            this.NotDownloaded = new List<MusicItem>();
            this.Genres = new MusicGenres();
        }


        public void AddDownloaded(string title, string artist, string genre)
        {
            int gID = this.Genres.CreateGetGenre(genre);
            MusicItem tmp = new MusicItem(++this.lastID, title, artist, gID);
            tmp.Change += this.childChangedHandler;
            this.Downloaded.Add(tmp);
        }

        public void AddNotDownloaded(string title, string artist, string genre)
        {
            int gID = this.Genres.CreateGetGenre(genre);
            MusicItem tmp = new MusicItem(++this.lastID, title, artist, gID);
            tmp.Change += this.childChangedHandler;
            this.NotDownloaded.Add(tmp);
        }


        public void RemoveTrack(int id)
        {
            this.Downloaded.RemoveAll((MusicItem i) => (i.ID == id));
            this.NotDownloaded.RemoveAll((MusicItem i) => (i.ID == id));
        }

        public void RemoveTrack(MusicItem item)
        {
            this.Downloaded.Remove(item);
            this.NotDownloaded.Remove(item);
        }


        public void Save(string path)
        {
            XDocument doc = new XDocument();
            doc.Add(new XComment("This is an autogenerated file, you should probably not edit it by hand."));
            doc.Add(this.SerializeXE());
            doc.Save(path);
        }

        public static MusicList Load(string path)
        {
            MusicList m = new MusicList();
            XDocument doc;

            try { doc = XDocument.Load(path); }
            catch (Exception) { throw new InvalidMusicXMLException(); }

            try
            {
                foreach (var genre in doc.Root.Element("genres").StopIfMissing().Elements("genre"))
                {
                    m.Genres.CreateGenre(
                        genre.Element("title").StopIfMissing().Get<string>(),
                        genre.Element("id").StopIfMissing().Get<int>()
                    );
                }

                foreach (var dl in doc.Root.Element("downloaded").StopIfMissing().Elements("track"))
                {
                    m.AddDownloaded(
                        dl.Element("title").Get<string>(),
                        dl.Element("artist").Get<string>(),
                        m.Genres.GetGenre(dl.Element("genre").Get<int>())
                    );
                }

                foreach (var ndl in doc.Root.Element("not-downloaded").StopIfMissing().Elements("track"))
                {
                    m.AddNotDownloaded(
                        ndl.Element("title").Get<string>(),
                        ndl.Element("artist").Get<string>(),
                        m.Genres.GetGenre(ndl.Element("genre").Get<int>())
                    );
                }
            }
            catch (Exception) { throw new InvalidMusicXMLException(); }

            return m;
        }


        public XElement SerializeXE()
        {
            XElement downloaded = new XElement("downloaded");
            XElement notDownloaded = new XElement("not-downloaded");

            foreach (MusicItem i in this.Downloaded) { downloaded.Add(i.SerializeXE()); }
            foreach (MusicItem i in this.Downloaded) { downloaded.Add(i.SerializeXE()); }

            return new XElement("music", this.Genres.SerializeXE(), downloaded, notDownloaded);
        }
    }
}
