using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

using MusicTracker.Util;

namespace MusicTracker.Core
{
    public class MusicList : MusicObjectBase, IXESerializable
    {
        private int lastID;

        public List<MusicItem> Tracks { get; private set; }

        public List<MusicItem> Downloaded { get { return this.Tracks.Where((MusicItem i) => i.Downloaded).ToList(); } }

        public List<MusicItem> NotDownloaded { get { return this.Tracks.Where((MusicItem i) => !i.Downloaded).ToList(); } }

        public MusicGenres Genres { get; private set; }


        public MusicList()
        {
            this.lastID = 0;
            this.Tracks = new List<MusicItem>();
            this.Genres = new MusicGenres();
        }


        public MusicItem AddTrack(string title, string artist, int genre, bool downloaded)
        {
            
            MusicItem tmp = new MusicItem(this, ++this.lastID, title, artist, genre, downloaded);
            tmp.Change += this.childChangedHandler;
            this.Tracks.Add(tmp);

            return tmp;
        }

        public MusicItem AddTrack(string title, string artist, string genre, bool downloaded)
        {
            int gID = this.Genres.CreateGetGenre(genre);
            return this.AddTrack(title, artist, gID, downloaded);
        }


        public void RemoveTrack(int id)
        {
            MusicItem tmp = this.Tracks.FindLast((MusicItem i) => (i.ID == id));
            if (tmp != null) { this.RemoveTrack(tmp); }
        }

        public void RemoveTrack(MusicItem track)
        {
            track.Detach();
            this.Tracks.Remove(track);
        }


        public void Save(string path)
        {
            XDocument doc = new XDocument();
            doc.Add(new XComment("This is an autogenerated file, you should probably not edit it by hand."));
            doc.Add(this.SerializeXE());
            doc.Save(path);
        }

        public static MusicList Load(string path)
        {
            MusicList m = new MusicList();
            XDocument doc;

            try { doc = XDocument.Load(path); }
            catch (Exception) { throw new InvalidMusicXMLException(); }

            try
            {
                foreach (var genre in doc.Root.Element("genres").StopIfMissing().Elements("genre"))
                {
                    m.Genres.CreateGetGenre(
                        genre.Element("title").StopIfMissing().Get<string>(),
                        genre.Element("id").StopIfMissing().Get<int>()
                    );
                }

                foreach (var track in doc.Root.Element("tracks").StopIfMissing().Elements("track"))
                {
                    m.AddTrack(
                        track.Element("title").Get<string>(),
                        track.Element("artist").Get<string>(),
                        track.Element("genre").Get<int>(),
                        track.Element("downloaded").Get<bool>()
                    );
                }
            }
            catch (Exception) { throw new InvalidMusicXMLException(); }

            return m;
        }


        public XElement SerializeXE()
        {
            XElement tracks = new XElement("tracks");
            foreach (MusicItem track in this.Tracks) { tracks.Add(track.SerializeXE()); }

            return new XElement("music", this.Genres.SerializeXE(), tracks);
        }
    }
}
